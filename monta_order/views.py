# -*- coding: utf-8 -*-
"""
FILE GENERATED BY MONTA AUTO BUILDER ON Thu Sep 29 12:15:32 PM EDT 2022

COPYRIGHT 2022 MONTA

This file is part of Monta.

Monta is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Monta is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Monta.  If not, see <https://www.gnu.org/licenses/>.

-------------------------------------------------------------------------------

This file contains the settings for the Django project.
"""

# Standard Library Imports
from typing import (
    Literal,
    Type,
    Any,
)

# Core Django Imports
from django.contrib.auth.mixins import LoginRequiredMixin
from django.utils.decorators import method_decorator
from django.views.decorators.http import (
    require_safe,
    require_POST,
)
from django.views.decorators.vary import vary_on_cookie
from django.views.generic import (
    CreateView,
    TemplateView,
    DetailView,
    UpdateView,
)
from django.http import (
    JsonResponse,
)
from django.core.handlers.asgi import ASGIRequest
from django.db import transaction

# Monta Imports
from monta_order import models


@method_decorator(require_safe, name="dispatch")
@method_decorator(vary_on_cookie, name="dispatch")
class NameListView(LoginRequiredMixin, TemplateView):
    """
    Class to render Index page.

    Args:
        LoginRequiredMixin (class): Django class to check if user is logged in.
        TemplateView (class): Django class to render a template.

    Returns:
        Template: Returns the driver index page.
    """

    template_name: Literal["order/index.html"] = "order/index.html"
    http_method_names: list[str] = ["get", "head", "options", "trace"]


@method_decorator(require_POST, name="dispatch")
class CreateName(LoginRequiredMixin, CreateView):
    """
    Class to render create driver page.
    Overwrites the post method to check if the form is valid. If the form is valid, request the user's organization
    and save the form. If the form is not valid, return a JSON response with a success value of False.

    Args:
        LoginRequiredMixin (class): Django class to check if user is logged in.
        CreateView (class): Django class to create a new object.

    Returns:
        JsonResponse: Returns a JSON response with a success value of True or False.
    """

    model: Type[models.Order] = models.Order
    template_name: Literal["order/index.html"] = "order/index.html"
    form_class: Type[""] = ""
    success_url = ""

    @transaction.atomic
    def post(
        self,
        request: ASGIRequest,
        *args: Any,
        **kwargs: Any,
    ) -> JsonResponse:
        pass


@method_decorator(require_POST, name="dispatch")
class NameUpdateView(UpdateView, LoginRequiredMixin):
    """
    Class to update the driver profile.

    Args:
        UpdateView (class): Django class to update an object.
        LoginRequiredMixin (class): Django class to check if user is logged in.

    Returns:
        JsonResponse: Returns a JSON response with a success value of True or False.
    """

    model: Type["MODEL_HERE"] = "MODEL_HERE"
    template_name: Literal["TEMPLATE_PATH_HERE"] = "TEMPLATE_PATH_HERE"
    form_class: Type["FORM_HERE"] = "FORM_HERE"
    success_url = "URL_HERE"


@method_decorator(require_safe, name="dispatch")
class NameEditView(LoginRequiredMixin, DetailView):
    """
    Class to render the driver edit page.

    Args:
        LoginRequiredMixin (class): Django class to check if user is logged in.
        DetailView (class): Django class to render a detail view.

    Returns:
        Template: Returns the driver edit page.
    """

    model: Type["MODEL_HERE"] = "MODEL_HERE"
    template_name: Literal["TEMPLATE_PATH_HERE"] = "TEMPLATE_PATH_HERE"
    http_method_names: list[str] = ["get", "head", "options", "trace"]


@method_decorator(require_POST, name="dispatch")
class NameUpdateView(UpdateView, LoginRequiredMixin):
    """
    Class to update the driver profile.

    Args:
        UpdateView (class): Django class to update an object.
        LoginRequiredMixin (class): Django class to check if user is logged in.

    Returns:
        JsonResponse: Returns a JSON response with a success value of True or False.
    """

    model: Type["MODEL_HERE"] = "MODEL_HERE"
    template_name: Literal["TEMPLATE_PATH_HERE"] = "TEMPLATE_PATH_HERE"
    form_class: Type["FORM_HERE"] = "FORM_HERE"
    success_url = "URL_HERE"

    @transaction.atomic
    def post(
        self,
        request: ASGIRequest,
        *args: Any,
        **kwargs: Any,
    ) -> JsonResponse:
        pass
